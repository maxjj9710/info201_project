# Which of the WA county had the highest amount of good days?
county_highest_good <- aqi_wa %>%
filter(Good.Days == max(Good.Days), na.rm = TRUE) %>%
select(County)
# How many good days did that county have?
days_highest_good <- aqi_wa %>%
filter(Good.Days == max(Good.Days), na.rm = TRUE) %>%
select(Good.Days)
# Which of the WA county had the lowest amount of good days?
county_lowest_good <- aqi_wa %>%
filter(Good.Days == min(Good.Days), na.rm = TRUE) %>%
select(County)
# How many good days did that county have?
days_lowest_good <- aqi_wa %>%
filter(Good.Days == min(Good.Days), na.rm = TRUE) %>%
select(Good.Days)
# What is the range between the highest max AQI and the lowest?
max_range <- range(aqi_wa$Max.AQI)
wa_only <- aqi_data %>%
filter(State == "Washington") %>%
filter(Date.Local >= "2015-01-01", Date.Local <= "2016-01-01")
# In which days of 2015 had the greatest mean of O3, and how much ppm?
highest_O3_mean <- wa_only %>%
filter(NO2.Mean == max(NO2.Mean), na.rm = TRUE) %>%
select(Date.Local, NO2.Mean) %>%
head(1)
# Load the necessary packages.
library(dplyr)
# Load the necessary packages.
library(dplyr)
library(ggplot2)
# Loading the relevant dataset. Note: Go to Session > Set Working Direction to
# change to this folder to have the file path run properly.
income_by_location <- read.csv("income_by_location.csv")
wa_income_location <- income_by_location %>%
filter(`ID.Race` >= "1", `ID.Race` <= "9") %>%
mutate("County" = str_sub(Geography, 1, -11)) %>%
select(Race, Year, `Household.Income.by.Race`, County)
ggplot(data = wa_income_location) +
geom_point(mapping = aes(x = Year, y = `Household.Income.by.Race`,
color = Race)) +
labs(title = "Household Income by Race in Washington State Between 2013 and
2018",
x = "Time (years)",
y = "Household Income")
ggplot(data = wa_income_location) +
geom_point(mapping = aes(x = Year, y = `Household.Income.by.Race`,
color = County)) +
labs(title = "Household Income by County in Washington State Between 2013 and
2018",
x = "Time (years)",
y = "Household Income",
color = "County")
# read data filemo
# Note: file is too large to be included in github. Download from
# https://www.kaggle.com/sogun3/uspollution?select=pollution_us_2000_2016.csv
aqi_data <- read.csv("pollution_us_2000_2016.csv", header = TRUE)
month <- as.Date(aqi_data$Date.Local)
months(month)
# reshape it from wide to long
long_df <- wa_only %>%
gather(Sources, AQI, 2:5)
# organize the data
wa_only <- aqi_data %>%
filter(State == "Washington") %>%
filter(Date.Local >= "2015-01-01", Date.Local <= "2016-01-01") %>%
# tried to group it by month but not really working
# mutate(Month = months(as.POSIXlt(aqi_data$Date.Local, format ="%d-%m-%y"))) %>%
group_by(Date.Local) %>%
select(County, Date.Local, NO2.Mean, O3.Mean, SO2.Mean, CO.Mean) %>%
summarise(mean_no2 = mean(NO2.Mean),
mean_o3 = mean(O3.Mean),
mean_so2 = mean(SO2.Mean),
mean_co = mean(CO.Mean))
months(month)
# organize the data
wa_only <- aqi_data %>%
filter(State == "Washington") %>%
filter(Date.Local >= "2015-01-01", Date.Local <= "2016-01-01") %>%
# tried to group it by month but not really working
# mutate(Month = months(as.POSIXlt(aqi_data$Date.Local, format ="%d-%m-%y"))) %>%
group_by(Date.Local) %>%
select(County, Date.Local, NO2.Mean, O3.Mean, SO2.Mean, CO.Mean) %>%
summarise(mean_no2 = mean(NO2.Mean),
mean_o3 = mean(O3.Mean),
mean_so2 = mean(SO2.Mean),
mean_co = mean(CO.Mean))
# reshape it from wide to long
long_df <- wa_only %>%
gather(Sources, AQI, 2:5)
# graphing
long_df %>%
ggplot(mapping = aes(x = Date.Local, y = AQI, group = Sources, color = Sources)) +
geom_line() +
labs(title = "AQI from different sources") +
labs(x = "2015/1/1 - 2016/1/1") +
labs(y = "Average AQI")
View(wa_income_location)
wa_income_location %>% group_by(Race, Year)
wa_income_location %>% group_by(Race, Year) %>% summarize(mean_race = mean(Household.Income.by.Race))
wa_income_location <- income_by_location %>%
filter(`ID.Race` >= "1", `ID.Race` <= "9") %>%
mutate("County" = str_sub(Geography, 1, -11)) %>%
select(Race, Year, `Household.Income.by.Race`, County)
race_plot_data <- wa_income_location %>%
group_by(Race, Year) %>%
summarize(mean_race = mean(Household.Income.by.Race))
ggplot(data = race_plot_data) +
geom_point(mapping = aes(x = Year, y = `mean_race`,
color = Race)) +
labs(title = "Household Income by Race in Washington State Between 2013 and
2018",
x = "Time (years)",
y = "Household Income")
county_plot_data <- wa_income_location %>%
group_by(County, Year) %>%
summarize(mean_county = mean(Household.Income.by.Race))
ggplot(data = county_plot_data) +
geom_point(mapping = aes(x = Year, y = `mean_county`,
color = County)) +
labs(title = "Household Income by County in Washington State Between 2013 and
2018",
x = "Time (years)",
y = "Household Income",
color = "County")
View(aqi_2016)
aqi_2016 <- read.csv("annual_aqi_by_county_2016.csv")
# Filtering AQI data to only show the state of Washington.
aqi_wa <- aqi_2016 %>%
filter(State == "Washington")
View(aqi_2016)
View(aqi_wa)
race_plot_data
View(race_plot_data)
income_by_location <- read.csv("income_by_location.csv")
race_income <- income_by_location %>%
filter(`ID.Race` >= "1", `ID.Race` <= "9") %>%
filter(Year == 2018) %>%
select(Race, `Household.Income.by.Race`, County)
race_income <- income_by_location %>%
filter(`ID.Race` >= "1", `ID.Race` <= "9") %>%
filter(Year == 2018) %>%
select(Race, `Household.Income.by.Race`)
race_income
race_income <- income_by_location %>%
filter(`ID.Race` >= "1", `ID.Race` <= "9") %>%
filter(Year == 2018) %>%
select(Race, `Household.Income.by.Race`) %>%
group_by(Race) %>%
summarize("Mean Income" = mean(Household.Income.by.Race))
race_income
race_income <- income_by_location %>%
filter(`ID.Race` >= "1", `ID.Race` <= "9") %>%
filter(Year == 2018) %>%
select(Race, `Household.Income.by.Race`) %>%
group_by(Race) %>%
summarize('Mean Income' = mean(Household.Income.by.Race))
race_income
View(race_income)
race_income <- income_by_location %>%
filter(`ID.Race` >= "1", `ID.Race` <= "9") %>%
select(Race, `Household.Income.by.Race`) %>%
group_by(Race) %>%
summarize('Mean Income' = mean(Household.Income.by.Race))
View(race_income)
race_income <- income_by_location %>%
filter(`ID.Race` >= "1", `ID.Race` <= "9") %>%
select(Race, Year, `Household.Income.by.Race`) %>%
group_by(Race) %>%
summarize('Mean Income' = mean(Household.Income.by.Race))
View(race_income)
# Load the necessary packages.
library(tidyverse)
View(race_income)
race_income <- income_by_location %>%
filter(`ID.Race` >= "1", `ID.Race` <= "9") %>%
select(Race, Year, `Household.Income.by.Race`) %>%
group_by(Year, Race) %>%
summarize('Mean Income' = mean(Household.Income.by.Race))
View(race_income)
select(Race, `Household.Income.by.Race`) %>%
group_by(Race) %>%
summarize('Mean Income' = mean(Household.Income.by.Race))
race_income <- income_by_location %>%
filter(`ID.Race` >= "1", `ID.Race` <= "9") %>%
filter(Year == 2018) %>%
select(Race, `Household.Income.by.Race`) %>%
group_by(Race) %>%
summarize('Mean Income' = mean(Household.Income.by.Race))
race_income <- income_by_location %>%
filter(`ID.Race` >= "1", `ID.Race` <= "9") %>%
filter(Year == 2018) %>%
select(Race, `Household.Income.by.Race`) %>%
group_by(Race) %>%
summarize('Mean Income' = mean(Household.Income.by.Race)) %>%
arrange(desc('Mean Income'))
race_income <- income_by_location %>%
filter(`ID.Race` >= "1", `ID.Race` <= "9") %>%
filter(Year == 2018) %>%
select(Race, `Household.Income.by.Race`) %>%
group_by(Race) %>%
summarize('Mean Income' = mean(Household.Income.by.Race)) %>%
arrange(desc())
race_income <- income_by_location %>%
filter(`ID.Race` >= "1", `ID.Race` <= "9") %>%
filter(Year == 2018) %>%
select(Race, `Household.Income.by.Race`) %>%
group_by(Race) %>%
summarize('Mean Income' = mean(Household.Income.by.Race)) %>%
arrange(desc(2))
View(race_income)
race_income <- income_by_location %>%
filter(`ID.Race` >= "1", `ID.Race` <= "9") %>%
filter(Year == 2018) %>%
select(Race, `Household.Income.by.Race`) %>%
group_by(Race) %>%
summarize('Mean Income' = mean(Household.Income.by.Race)) %>%
arrange(desc('Mean Income'))
View(race_income)
race_income <- income_by_location %>%
filter(`ID.Race` >= "1", `ID.Race` <= "9") %>%
filter(Year == 2018) %>%
select(Race, `Household.Income.by.Race`) %>%
group_by(Race) %>%
summarize(mean = mean(Household.Income.by.Race)) %>%
arrange(desc(mean))
View(race_income)
race_income <- income_by_location %>%
filter(`ID.Race` >= "1", `ID.Race` <= "9") %>%
filter(Year == 2018) %>%
select(Race, `Household.Income.by.Race`) %>%
group_by(Race) %>%
summarize(mean = mean(Household.Income.by.Race)) %>%
arrange(desc(mean)) %>%
rename(mean = "Mean Income")
View(aqi_wa)
# Filtering AQI data to only show the state of Washington.
aqi_wa <- aqi_2016 %>%
filter(State == "Washington") %>%
group_by(County) %>%
select(County, X90th.Percentile.AQI) %>%
slice_max(n = 10) %>%
arrange(desc(X90th.Percentile.AQI)) %>%
rename("90th Percentile AQI" = X90th.Percentile.AQI)
# Filtering AQI data to only show the state of Washington.
aqi_wa <- aqi_2016 %>%
filter(State == "Washington") %>%
group_by(County) %>%
select(County, X90th.Percentile.AQI) %>%
slice_max(n = 10) %>%
s
# Filtering AQI data to only show the state of Washington.
aqi_wa <- aqi_2016 %>%
filter(State == "Washington") %>%
group_by(County) %>%
select(County, X90th.Percentile.AQI) %>%
slice_max(n = 10)
# Filtering AQI data to only show the state of Washington.
aqi_wa <- aqi_2016 %>%
filter(State == "Washington") %>%
group_by(County) %>%
select(County, X90th.Percentile.AQI)
# Filtering AQI data to only show the state of Washington.
aqi_wa <- aqi_2016 %>%
filter(State == "Washington") %>%
group_by(County) %>%
select(County, X90th.Percentile.AQI) %>%
top_n(10)
View(aqi_wa)
# Filtering AQI data to only show the state of Washington.
aqi_wa_90 <- aqi_2016 %>%
filter(State == "Washington") %>%
group_by(County) %>%
select(County, X90th.Percentile.AQI) %>%
arrage(desc(X90th.Percentile.AQI)) %>%
slice_max(X90th.Percentile.AQI, 10)
# Filtering AQI data to only show the state of Washington.
aqi_wa_90 <- aqi_2016 %>%
filter(State == "Washington") %>%
group_by(County) %>%
select(County, X90th.Percentile.AQI) %>%
arrange(desc(X90th.Percentile.AQI)) %>%
slice_max(X90th.Percentile.AQI, 10)
# Filtering AQI data to only show the state of Washington.
aqi_wa_90 <- aqi_2016 %>%
filter(State == "Washington") %>%
group_by(County) %>%
select(County, X90th.Percentile.AQI) %>%
arrange(desc(X90th.Percentile.AQI))
View(aqi_wa_90)
# Filtering AQI data to only show the state of Washington.
aqi_wa_90 <- aqi_2016 %>%
filter(State == "Washington") %>%
group_by(County) %>%
select(County, X90th.Percentile.AQI) %>%
arrange(desc(X90th.Percentile.AQI)) %>%
slice_max(X90th.Percentile.AQI, n = 10)
View(aqi_wa_90)
# Filtering AQI data to only show the state of Washington.
aqi_wa_90 <- aqi_2016 %>%
filter(State == "Washington") %>%
group_by(County) %>%
select(County, X90th.Percentile.AQI) %>%
arrange(desc(X90th.Percentile.AQI))
# Filtering AQI data to only show the state of Washington.
aqi_wa_90 <- aqi_2016 %>%
filter(State == "Washington") %>%
group_by(County) %>%
select(County, X90th.Percentile.AQI) %>%
arrange(desc(X90th.Percentile.AQI)) %>%
top_n(10)
View(aqi_wa_90)
# Filtering AQI data to only show the state of Washington.
aqi_wa_90 <- aqi_2016 %>%
filter(State == "Washington") %>%
group_by(County) %>%
select(County, X90th.Percentile.AQI) %>%
arrange(desc(X90th.Percentile.AQI))
aqi_wa_90 %>% top_n(1)
aqi_wa_90 %>%
slice_max(X90th.Percentile.AQI, n = 10)
# Filtering AQI data to only show the state of Washington.
aqi_wa_90 <- aqi_2016 %>%
filter(State == "Washington") %>%
group_by(County) %>%
select(County, X90th.Percentile.AQI) %>%
arrange(desc(X90th.Percentile.AQI)) %>%
slice(1:10)
aqi_wa_90
# Filtering AQI data to only show the state of Washington.
aqi_wa_90 <- aqi_2016 %>%
filter(State == "Washington") %>%
group_by(County) %>%
select(County, X90th.Percentile.AQI) %>%
arrange(desc(X90th.Percentile.AQI))
aqi_wa_90
aqi_wa_90 %>%
slice(1:10)
# Filtering AQI data to only show the state of Washington.
aqi_wa_90 <- aqi_2016 %>%
filter(State == "Washington") %>%
group_by(County) %>%
select(X90th.Percentile.AQI) %>%
arrange(desc(X90th.Percentile.AQI))
aqi_wa_90
aqi_wa_90 %>%
slice(1:10)
aqi_wa_90 %>%
slice(1:11)
aqi_wa_90 %>%
slice_max(X90th.Percentile.AQI, n = 10)
aqi_wa_90 %>%
head(n = 10L)
# Filtering AQI data to only show the state of Washington.
aqi_wa_90 <- aqi_2016 %>%
filter(State == "Washington") %>%
group_by(County) %>%
select(X90th.Percentile.AQI) %>%
arrange(desc(X90th.Percentile.AQI)) %>%
head(n = 10L) %>%
rename("90th Percentile AQI" = X90th.Percentile.AQI)
View(aqi_data)
pollution_table <- aqi_data %>%
filter(State == "Washington") %>%
filter(Date.Local >= "2015-01-01", Date.Local <= "2016-01-01") %>%
# tried to group it by month but not really working
# mutate(Month = months(as.POSIXlt(aqi_data$Date.Local, format ="%d-%m-%y"))) %>%
group_by(Date.Local) %>%
select(County, Date.Local, NO2.Mean, O3.Mean, SO2.Mean, CO.Mean) %>%
summarise(mean_no2 = mean(NO2.Mean),
mean_o3 = mean(O3.Mean),
mean_so2 = mean(SO2.Mean),
mean_co = mean(CO.Mean))
pollution_table
pollution_table <- aqi_data %>%
filter(State == "Washington") %>%
filter(Date.Local >= "2015-01-01", Date.Local <= "2016-01-01") %>%
# tried to group it by month but not really working
# mutate(Month = months(as.POSIXlt(aqi_data$Date.Local, format ="%d-%m-%y"))) %>%
group_by(County) %>%
summarise(mean_no2 = mean(NO2.Mean),
mean_o3 = mean(O3.Mean),
mean_so2 = mean(SO2.Mean),
mean_co = mean(CO.Mean))
View(pollution_table)
# King County WA Pollutant PPM Means in 2015
pollution_table <- aqi_data %>%
filter(State == "Washington") %>%
filter(Date.Local >= "2015-01-01", Date.Local <= "2016-01-01") %>%
group_by(County) %>%
summarise("Mean NO2" = mean(NO2.Mean),
"Mean O3" = mean(O3.Mean),
"Mean SO2" = mean(SO2.Mean),
"Mean CO" = mean(CO.Mean))
View(pollution_table)
# King County WA Pollutant PPM Means in 2015
pollution_table <- aqi_data %>%
filter(State == "Washington") %>%
filter(Date.Local >= "2015-01-01", Date.Local <= "2016-01-01") %>%
group_by(County) %>%
summarise("Mean NO2 (ppm)" = mean(NO2.Mean),
"Mean O3 (ppm)" = mean(O3.Mean),
"Mean SO2 (ppm)" = mean(SO2.Mean),
"Mean CO (ppm)" = mean(CO.Mean))
# Which of the WA county had the highest amount of good days?
county_highest_good <- aqi_wa %>%
filter(Good.Days == max(Good.Days), na.rm = TRUE) %>%
pull(County)
# Which of the WA county had the highest amount of good days?
county_highest_good <- aqi_wa %>%
filter(Good.Days == max(Good.Days), na.rm = TRUE) %>%
select(County)
# Air Quality Calculations
aqi_wa <- aqi_2016 %>%
filter(State == "Washington")
# Which of the WA county had the highest amount of good days?
county_highest_good <- aqi_wa %>%
filter(Good.Days == max(Good.Days), na.rm = TRUE) %>%
select(County)
# Which of the WA county had the highest amount of good days?
county_highest_good <- aqi_wa %>%
filter(Good.Days == max(Good.Days), na.rm = TRUE) %>%
pull(County)
county_highest_good
# Summary information ----------------------------------------------------------
# Income Calculations
# What is the total income each year?
yearly_total_income <- income_by_location %>%
filter(Race == "Total") %>%
group_by(Year) %>%
summarise(sum(Household.Income.by.Race)) %>%
pull(Household.Income.by.Race)
# Loading relevant data set. Note to go to Session > Set Working Direction to
# change to this folder to have the file path run properly.
income_by_location <- read.csv("income_by_location.csv")
# Summary information ----------------------------------------------------------
# Income Calculations
# What is the total income each year?
yearly_total_income <- income_by_location %>%
filter(Race == "Total") %>%
group_by(Year) %>%
summarise(sum(Household.Income.by.Race)) %>%
pull(Household.Income.by.Race)
# Summary information ----------------------------------------------------------
# Income Calculations
# What is the total income each year?
yearly_total_income <- income_by_location %>%
filter(Race == "Total") %>%
group_by(Year) %>%
summarise(sum(Household.Income.by.Race))
yearly_total_income
# Which county has the highest average income?
temop <- filter(income_by_location, Race == "Total") %>%
group_by(Geography) %>%
summarise(mean(Household.Income.by.Race)) %>%
pull(Household.Income.by.Race)
# Summary information ----------------------------------------------------------
# Income Calculations
# What is the total income each year?
yearly_total_income <- income_by_location %>%
filter(Race == "Total") %>%
group_by(Year) %>%
summarise("Household Income By Race" = sum(Household.Income.by.Race))
# Which county has the highest average income?
temop <- filter(income_by_location, Race == "Total") %>%
group_by(Geography) %>%
summarise(mean(Household.Income.by.Race))
temop
# Which county has the highest average income?
highest_county <- filter(income_by_location, Race == "Total") %>%
group_by(Geography) %>%
summarise(Household.Income.by.Race = mean(Household.Income.by.Race)) %>%
arrange(desc(Household.Income.by.Race)) %>%
head(n = 1L) %>%
pull(County)
# Which county has the highest average income?
highest_county <- filter(income_by_location, Race == "Total") %>%
group_by(Geography) %>%
summarise(Household.Income.by.Race = mean(Household.Income.by.Race)) %>%
arrange(desc(Household.Income.by.Race)) %>%
head(n = 1L) %>%
pull(Geography)
highest_county
highest_O3_mean
# In which days of 2015 had the greatest mean of O3, and how much ppm?
highest_O3_mean <- wa_only %>%
filter(NO2.Mean == max(NO2.Mean), na.rm = TRUE) %>%
select(Date.Local, NO2.Mean) %>%
head(1) %>%
pull(NO2.Mean)
wa_only <- aqi_data %>%
filter(State == "Washington") %>%
filter(Date.Local >= "2015-01-01", Date.Local <= "2016-01-01")
# In which days of 2015 had the greatest mean of O3, and how much ppm?
highest_O3_mean <- wa_only %>%
filter(NO2.Mean == max(NO2.Mean), na.rm = TRUE) %>%
select(Date.Local, NO2.Mean) %>%
head(1) %>%
pull(NO2.Mean)
highest_O3_mean
yearly_total_income
# Note: file is too large to be included in github. Download from
# https://www.kaggle.com/sogun3/uspollution?select=pollution_us_2000_2016.csv
aqi_data <- read.csv("pollution_us_2000_2016.csv", header = TRUE)
setwd("E:/EECS/INFO201/info201_project")
# Note: file is too large to be included in github. Download from
# https://www.kaggle.com/sogun3/uspollution?select=pollution_us_2000_2016.csv
aqi_data <- read.csv("pollution_us_2000_2016.csv", header = TRUE)
install.packages(lubridate)
install.packages('lubridate')
install.packages('lubridate')
install.packages("lubridate")
